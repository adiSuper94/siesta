package generated
import (
  "fmt"
	"context"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/pgtype"
	"github.com/jackc/pgx/v5/pgconn"
)

type DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
}

{{ range $tableName, $table := .Tables }}
type {{ toCamelCase $table.TableName}} struct {
{{ range $table.Columns}} {{ toCamelCase .ColumnName }} {{ .GetGoType }}
{{end}}
}

func SelectAll{{ toCamelCase $tableName }}(ctx context.Context, db DBTX) ([]{{ toCamelCase $tableName }}, error){
  var res []{{ toCamelCase $tableName }}
  query := `SELECT {{ $table.CommaSeparatedColumnNames }} FROM {{ $tableName }}`
	rows, err := db.Query(ctx, query)
  defer rows.Close()
  if err != nil{
    fmt.Printf("error while executing %v \n Error: %v\n", query, err)
    return res, err
  }
  for rows.Next(){
    var row {{ toCamelCase $tableName }}
    rows.Scan({{range $table.Columns}}&row.{{ toCamelCase .ColumnName}},{{end}})
    res = append(res, row)
  }
  return res, nil
}

func Insert{{ toCamelCase $tableName }}(ctx context.Context, db DBTX, t {{ toCamelCase $tableName }}) ({{ toCamelCase $tableName }}, error){
  query := `INSERT INTO {{$table.CommaSeparatedColumnNames}}) VALUES({{$table.InsertParams}}) RETURNING *`
  rawRow := db.QueryRow(ctx, query, {{range $table.Columns}}&t.{{ toCamelCase .ColumnName}},{{end}})
  var row {{ toCamelCase $table.TableName }}
  rawRow.Scan({{range $table.Columns}}&row.{{ toCamelCase .ColumnName}},{{end}})
  return row,nil
}

func Get{{toCamelCase $tableName}}ByPK(ctx context.Context, db DBTX, {{range $table.PK}}{{toLowerCamelCase
.ColumnName}} {{.GetGoType}}, {{end}}) {{toCamelCase $tableName}}{
  query := "{{ $table.SelectByPKQuery }}"
  rawRow := db.QueryRow(ctx, query, {{range $table.PK}}{{ toLowerCamelCase .ColumnName}},{{end}})
  var row {{ toCamelCase $table.TableName }}
  rawRow.Scan({{range $table.Columns}}&row.{{ toCamelCase .ColumnName}},{{end}})
  return row
}
{{end}}
