package generated

import (
  "fmt"
	"net/http"
  "os"
	"encoding/json"
	"context"
	"github.com/jackc/pgx/v5"
	"github.com/jackc/pgx/pgtype"
	"github.com/jackc/pgx/v5/pgconn"
)

type DBTX interface {
	Exec(context.Context, string, ...interface{}) (pgconn.CommandTag, error)
	Query(context.Context, string, ...interface{}) (pgx.Rows, error)
	QueryRow(context.Context, string, ...interface{}) pgx.Row
}

type option[T any] struct{
  value T
  isSome bool
}

func some[T any](value T) option[T] {
  return option[T]{isSome: true, value: value}
}

func none[T any]() option[T] {
  return option[T]{isSome: false}
}

func(o option[T]) get() T {
  if o.isSome {return o.value}
  panic("option is empty")
}

func (o option[T]) isEmpty() bool {
  return !o.isSome
}

{{ range $tableName, $table := .Tables }}
type {{ toCamelCase $table.TableName}} struct {
{{ range $table.Columns}} {{ toCamelCase .ColumnName }} option[{{ .GetGoType }}]
{{end}}
}

func (t {{toCamelCase $tableName}}) MarshalJSON() ([]byte, error){
  data := make(map[string]any)
  {{range $table.Columns}}
  if(!t.{{toCamelCase .ColumnName}}.isEmpty()){
    key := "{{toCamelCase .ColumnName}}"
    val := t.{{toCamelCase .ColumnName}}.get()
    data[key] = val
  }
  {{end}}
  return json.Marshal(data)
}

func (t *{{toCamelCase $tableName}}) UnmarshalJSON(data []byte) error{
  jason := make(map[string]json.RawMessage)
  err := json.Unmarshal(data, &jason)
  if err != nil {
    fmt.Fprintf(os.Stderr, "error while unmarshalling json :%v\n", err)
    return err
  }
  {{range $table.Columns}}
    if jason["{{.ColumnName}}"] != nil{
      var val {{.GetGoType}}
      err = json.Unmarshal(jason["{{.ColumnName}}"], &val)
      if err != nil {
        fmt.Fprintf(os.Stderr, "error while unmarshalling json field {{.ColumnName}} :%v\n", err)
        return err
      }
      t.{{toCamelCase .ColumnName}} = some(val)
    }else{
      t.{{toCamelCase .ColumnName}} = none[{{.GetGoType}}]()
    }
  {{end}}
  return nil
}

func SelectAll{{ toCamelCase $tableName }}(ctx context.Context, db DBTX) ([]{{ toCamelCase $tableName }}, error){
  var res []{{ toCamelCase $tableName }}
  query := "{{$table.SelectAllQuery}}"
	rows, err := db.Query(ctx, query)
  defer rows.Close()
  if err != nil{
    fmt.Fprintf(os.Stderr, "error while executing %v \n Error: %v\n", query, err)
    return res, err
  }
  for rows.Next(){
    {{ range $table.Columns}} var {{ toCamelCase .ColumnName }} {{ .GetGoType }}
    {{end}}
    rows.Scan({{range $table.Columns}}&{{ toCamelCase .ColumnName}},{{end}})
    row := {{toCamelCase $tableName}}{
      {{range $table.Columns}}{{ toCamelCase .ColumnName}}:some({{toCamelCase .ColumnName}}),{{end}}
    }
    res = append(res, row)
  }
  return res, nil
}

func Select{{toCamelCase $tableName}}ByPK(ctx context.Context, db DBTX, {{range $table.PK}}{{toLowerCamelCase .ColumnName}} {{.GetGoType}}, {{end}}) (*{{toCamelCase $tableName}}, error){
  query := "{{ $table.SelectByPKQuery }}"
  rawRow := db.QueryRow(ctx, query, {{range $table.PK}}{{ toLowerCamelCase .ColumnName}},{{end}})
  {{ range $table.Columns}} var {{ toCamelCase .ColumnName }} {{ .GetGoType }}
  {{end}}
  err:= rawRow.Scan({{range $table.Columns}}&{{ toCamelCase .ColumnName}},{{end}})
  if err != nil {
    fmt.Fprintf(os.Stderr, "error while selecting row from {{$tableName}} \n error: %v", err)
    return nil, err
  }
  row := {{toCamelCase $tableName}}{
    {{range $table.Columns}}{{ toCamelCase .ColumnName}}:some({{toCamelCase .ColumnName}}),{{end}}
  }
  return &row, nil
}

func Delete{{toCamelCase $tableName}}ByPK(ctx context.Context, db DBTX, {{range $table.PK}}{{toLowerCamelCase .ColumnName}} {{.GetGoType}}, {{end}}) (bool, error){
  query := "{{$table.DeleteQuery}}"
  _, err := db.Exec(ctx, query, {{range $table.PK}}{{toLowerCamelCase .ColumnName}}, {{end}})
  if err != nil {
    fmt.Fprintf(os.Stderr, "error while deleting row from {{$tableName}} \n error: %v", err)
    return false, err
  }
  return true, nil
}

func Insert{{toCamelCase $tableName}}(ctx context.Context, db DBTX, row {{toCamelCase $tableName}}) (*{{toCamelCase $tableName}}, error){
  cols := ""
  params:= ""
  vals := make([]any, 1)
  i := 1
  {{range $table.Columns}}
  if(!row.{{toCamelCase .ColumnName}}.isEmpty()){
    col := "{{.ColumnName}}"
    vals = append(vals, row.{{toCamelCase .ColumnName}}.get())
    if cols == "" {
      cols = col
      params = fmt.Sprintf("$%d", i)
      i++
    }else{
      cols = fmt.Sprintf("%s, %s", cols, col)
      params = fmt.Sprintf("%s, $%d", params, i)
      i++
    }
  }
  {{end}}
  query := fmt.Sprintf("INSERT INTO {{$tableName}} (%s) VALUES (%s) RETURNING *", cols, params)
  rawRow := db.QueryRow(ctx, query, vals[1:i]...)
  {{ range $table.Columns}} var {{ toCamelCase .ColumnName }} {{ .GetGoType }}
  {{end}}
  err := rawRow.Scan({{range $table.Columns}}&{{ toCamelCase .ColumnName}},{{end}})
  if err != nil{
    fmt.Fprintf(os.Stderr, "Error while inserting into {{$tableName}} row: %v \n error: %v\n", row, err)
    return nil, err
  }
  insertedRow := &{{toCamelCase $tableName}}{
    {{range $table.Columns}}{{ toCamelCase .ColumnName}}:some({{toCamelCase .ColumnName}}),{{end}}
  }
  return insertedRow ,nil
}

func Update{{toCamelCase $tableName}}(ctx context.Context, db DBTX, row {{toCamelCase $tableName}}) (bool, error) {
  setClause := ""
  whereClause := ""
  vals := make([]any, 1)
  i := 1
  {{range $table.Columns}}
  if(!row.{{toCamelCase .ColumnName}}.isEmpty()){
    col := "{{.ColumnName}}"
    vals = append(vals, row.{{toCamelCase .ColumnName}}.get())
    if i == 1 {
      setClause = fmt.Sprintf("%s %s = $%d", setClause, col, i)
    }else{
      setClause = fmt.Sprintf("%s, %s = $%d", setClause, col, i)
    }
    i++
  }
  {{end}}
  j := i
  col := ""
  {{range $table.PK}}
  col = "{{.ColumnName}}"
  vals = append(vals, row.{{toCamelCase .ColumnName}}.get())
  if i == j {
    whereClause = fmt.Sprintf("%s %s = $%d", whereClause, col, i)
  }else{
    whereClause = fmt.Sprintf("%s AND %s = $%d", whereClause, col, i)
  }
  i++
  {{end}}
  query := fmt.Sprintf("UPDATE {{$tableName}} SET %s WHERE %s", setClause, whereClause)
  _, err := db.Exec(ctx, query, vals[1:i]...)
  if err != nil {
    fmt.Fprintf(os.Stderr, "%v \n", err)
    return false, err
  }
  return true, nil
}

{{end}}

func cast(str string, tipe string) any {
	switch tipe {
	case "string":
		return str
	case "bool":
		if str == "true" {
			return true
		} else if str == "false" {
			return false
		}
	}
	return nil
}

func GetRouter(db DBTX) *http.ServeMux {
	router := http.NewServeMux()
  {{ range $tableName, $table := .Tables }}
  router.HandleFunc("GET /{{$tableName}}", func(w http.ResponseWriter, r *http.Request) {
    rows, err := SelectAll{{ toCamelCase $tableName}}(r.Context(), db)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error while executing select query from {{$tableName}} \n%v\n", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
		}
  	json.NewEncoder(w).Encode(rows)
    return
  })

  router.HandleFunc("GET /{{$tableName}}{{range $table.PK}}/{{.ColumnName}}/{{"{"}}{{toLowerCamelCase .ColumnName}}{{"}"}}{{end}}", func(w http.ResponseWriter, r *http.Request) {
    {{range $table.PK}}
    {{toLowerCamelCase .ColumnName}}Str := r.PathValue("{{toLowerCamelCase .ColumnName}}")
    {{toLowerCamelCase .ColumnName}} := cast({{toLowerCamelCase .ColumnName}}Str, "{{.GetGoType}}").({{.GetGoType}})
    {{end}}
    row, err := Select{{toCamelCase $tableName}}ByPK(r.Context(), db, {{range $table.PK}}{{toLowerCamelCase .ColumnName}}, {{end}})
    if err != nil {
			fmt.Fprintf(os.Stderr, "Error while executing select query by PK from {{$tableName}} \n%v\n", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
    }
  	json.NewEncoder(w).Encode(row)
    return
  })

  router.HandleFunc("DELETE /{{$tableName}}{{range $table.PK}}/{{.ColumnName}}/{{"{"}}{{toLowerCamelCase .ColumnName}}{{"}"}}{{end}}", func(w http.ResponseWriter, r *http.Request) {
    {{range $table.PK}}
    {{toLowerCamelCase .ColumnName}}Str := r.PathValue("{{toLowerCamelCase .ColumnName}}")
    {{toLowerCamelCase .ColumnName}} := cast({{toLowerCamelCase .ColumnName}}Str, "{{.GetGoType}}").({{.GetGoType}})
    {{end}}
    ok, err := Delete{{toCamelCase $tableName}}ByPK(r.Context(), db, {{range $table.PK}}{{toLowerCamelCase .ColumnName}}, {{end}})
    if err != nil || !ok {
			fmt.Fprintf(os.Stderr, "Error while executing delete query by PK from {{$tableName}} \n%v\n", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
    }
    w.WriteHeader(http.StatusNoContent)
    return
  })

  router.HandleFunc("POST /{{$tableName}}", func(w http.ResponseWriter, r *http.Request) {
    decoder := json.NewDecoder(r.Body)
    var body {{toCamelCase $tableName}}
    err :=  decoder.Decode(&body)
    if err != nil {
      fmt.Fprintf(os.Stderr, "error while decoding body of {{$tableName}}, error: %v \n", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
    }
    insertedRow, err := Insert{{toCamelCase $tableName}}(r.Context(), db, body)
    if err != nil {
      fmt.Fprintf(os.Stderr, "error while inserting into {{$tableName}}, error: %v \n", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
    }
  	json.NewEncoder(w).Encode(insertedRow)
  })

  router.HandleFunc("PUT /{{$tableName}}", func(w http.ResponseWriter, r *http.Request) {
    decoder := json.NewDecoder(r.Body)
    var body {{toCamelCase $tableName}}
    err :=  decoder.Decode(&body)
    if err != nil {
      fmt.Fprintf(os.Stderr, "error while decoding body of {{$tableName}}, error: %v \n", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
    }
    ok, err := Update{{toCamelCase $tableName}}(r.Context(), db , body)
    if err != nil || !ok {
      fmt.Fprintf(os.Stderr, "error while inserting into {{$tableName}}, error: %v \n", err)
			w.WriteHeader(http.StatusInternalServerError)
			return
    }
		w.WriteHeader(http.StatusCreated)
  })

  {{end}}
  return router
}

